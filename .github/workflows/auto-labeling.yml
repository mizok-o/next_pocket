name: Auto Labeling

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, reopened]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        if: github.event_name == 'pull_request'
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.{ts,tsx,js,jsx}
            **/*.{yml,yaml,json}
            **/*.{md,txt}
            **/*.{sql,prisma}
            chrome-extension/**
            .github/**
            api/**
            app/**
            components/**
            lib/**
            prisma/**
            docs/**

      - name: Apply labels based on file changes
        uses: actions/github-script@v7
        with:
          script: |
            const labelRules = [
              {
                name: 'backend',
                patterns: ['app/api/', 'api/', 'lib/', '*.ts'],
                color: '8B5A2B',
                description: 'Backend related changes'
              },
              {
                name: 'frontend',
                patterns: ['app/', 'components/', '*.tsx', '*.jsx'],
                color: '0E7A8D',
                description: 'Frontend related changes'
              },
              {
                name: 'chrome-extension',
                patterns: ['chrome-extension/'],
                color: '4285F4',
                description: 'Chrome extension related changes'
              },
              {
                name: 'github',
                patterns: ['.github/'],
                color: '7057FF',
                description: 'GitHub Actions and workflows'
              },
              {
                name: 'dependencies',
                patterns: ['package.json', 'package-lock.json'],
                color: 'E99695',
                description: 'Dependency updates'
              }
            ];

            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}';
            const labelsToAdd = new Set();

            // PRの場合のみファイル変更ベースでラベリング（優先順位付き）
            if (context.eventName === 'pull_request' && changedFiles) {
              const files = changedFiles.split(' ');
              
              // 優先順位順にチェックし、最初にマッチしたラベルのみ追加
              for (const rule of labelRules) {
                const shouldAddLabel = rule.patterns.some(pattern => {
                  if (pattern.includes('*')) {
                    // ワイルドカードパターン
                    const extension = pattern.replace('*', '');
                    return files.some(file => file.endsWith(extension));
                  }
                  
                  // ディレクトリパターン
                  return files.some(file => file.includes(pattern));
                });
                
                if (shouldAddLabel) {
                  labelsToAdd.add(rule.name);
                  break; // 最初にマッチしたラベルで終了
                }
              }
            }

            // Issue/PRのタイトルと本文からキーワードベースでラベリング
            const title = context.payload.pull_request?.title || context.payload.issue?.title || '';
            const body = context.payload.pull_request?.body || context.payload.issue?.body || '';
            const text = (title + ' ' + body).toLowerCase();

            const keywordRules = {
              'bug': ['bug', 'fix', 'error', 'issue', '修正', 'エラー', 'バグ'],
              'ui/ux': ['ui', 'ux', 'design', 'style', 'css', 'デザイン', 'スタイル']
            };

            for (const [labelName, keywords] of Object.entries(keywordRules)) {
              if (keywords.some(keyword => text.includes(keyword))) {
                labelsToAdd.add(labelName);
              }
            }

            // 既存のラベルを取得
            const { data: existingLabels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingLabelNames = existingLabels.map(label => label.name);

            // 必要なラベルを作成
            for (const rule of labelRules) {
              if (labelsToAdd.has(rule.name) && !existingLabelNames.includes(rule.name)) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: rule.name,
                    color: rule.color,
                    description: rule.description
                  });
                  console.log(`Created label: ${rule.name}`);
                } catch (error) {
                  console.log(`Label ${rule.name} already exists or failed to create`);
                }
              }
            }

            // キーワードベースのラベルも作成
            for (const labelName of Object.keys(keywordRules)) {
              if (labelsToAdd.has(labelName) && !existingLabelNames.includes(labelName)) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelName,
                    color: 'CCCCCC',
                    description: `Auto-generated label for ${labelName}`
                  });
                } catch (error) {
                  console.log(`Label ${labelName} already exists or failed to create`);
                }
              }
            }

            // ラベルを適用
            if (labelsToAdd.size > 0) {
              const issueNumber = context.payload.pull_request?.number || context.payload.issue?.number;
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: Array.from(labelsToAdd)
              });
              
              console.log(`Applied labels: ${Array.from(labelsToAdd).join(', ')}`);
            } else {
              console.log('No labels to apply');
            }